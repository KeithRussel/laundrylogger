{"ast":null,"code":"import { ADD_LOG, DELETE_LOG, SET_CURRENT, CLEAR_CURRENT, UPDATE_LOG, FILTER_LOGS, CLEAR_FILTER } from '../types';\nexport default ((state, action) => {\n  switch (action.type) {\n    case ADD_LOG:\n      return { ...state,\n        // Current State\n        logs: [...state.logs, action.payload]\n      };\n\n    case DELETE_LOG:\n      return { ...state,\n        logs: state.logs.filter(log => log.id !== action.payload)\n      };\n\n    case FILTER_LOGS:\n      return { ...state,\n        filtered: state.logs.filter(log => {\n          const regex = new RegExp(`${action.payload}`, 'gi');\n          return log.message.match(regex) || log.launderer.match(regex);\n        })\n      };\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["D:/reactjs/laundry-logger/client/src/context/log/logReducer.js"],"names":["ADD_LOG","DELETE_LOG","SET_CURRENT","CLEAR_CURRENT","UPDATE_LOG","FILTER_LOGS","CLEAR_FILTER","state","action","type","logs","payload","filter","log","id","filtered","regex","RegExp","message","match","launderer"],"mappings":"AAAA,SACEA,OADF,EAEEC,UAFF,EAGEC,WAHF,EAIEC,aAJF,EAKEC,UALF,EAMEC,WANF,EAOEC,YAPF,QAQO,UARP;AAUA,gBAAe,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAChC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKT,OAAL;AACE,aAAO,EACL,GAAGO,KADE;AACK;AACVG,QAAAA,IAAI,EAAE,CAAC,GAAGH,KAAK,CAACG,IAAV,EAAgBF,MAAM,CAACG,OAAvB;AAFD,OAAP;;AAIF,SAAKV,UAAL;AACE,aAAO,EACL,GAAGM,KADE;AAELG,QAAAA,IAAI,EAAEH,KAAK,CAACG,IAAN,CAAWE,MAAX,CAAmBC,GAAD,IAASA,GAAG,CAACC,EAAJ,KAAWN,MAAM,CAACG,OAA7C;AAFD,OAAP;;AAIF,SAAKN,WAAL;AACE,aAAO,EACL,GAAGE,KADE;AAELQ,QAAAA,QAAQ,EAAER,KAAK,CAACG,IAAN,CAAWE,MAAX,CAAmBC,GAAD,IAAS;AACnC,gBAAMG,KAAK,GAAG,IAAIC,MAAJ,CAAY,GAAET,MAAM,CAACG,OAAQ,EAA7B,EAAgC,IAAhC,CAAd;AACA,iBAAOE,GAAG,CAACK,OAAJ,CAAYC,KAAZ,CAAkBH,KAAlB,KAA4BH,GAAG,CAACO,SAAJ,CAAcD,KAAd,CAAoBH,KAApB,CAAnC;AACD,SAHS;AAFL,OAAP;;AAOF;AACE,aAAOT,KAAP;AApBJ;AAsBD,CAvBD","sourcesContent":["import {\r\n  ADD_LOG,\r\n  DELETE_LOG,\r\n  SET_CURRENT,\r\n  CLEAR_CURRENT,\r\n  UPDATE_LOG,\r\n  FILTER_LOGS,\r\n  CLEAR_FILTER,\r\n} from '../types';\r\n\r\nexport default (state, action) => {\r\n  switch (action.type) {\r\n    case ADD_LOG:\r\n      return {\r\n        ...state, // Current State\r\n        logs: [...state.logs, action.payload],\r\n      };\r\n    case DELETE_LOG:\r\n      return {\r\n        ...state,\r\n        logs: state.logs.filter((log) => log.id !== action.payload),\r\n      };\r\n    case FILTER_LOGS:\r\n      return {\r\n        ...state,\r\n        filtered: state.logs.filter((log) => {\r\n          const regex = new RegExp(`${action.payload}`, 'gi');\r\n          return log.message.match(regex) || log.launderer.match(regex);\r\n        }),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}