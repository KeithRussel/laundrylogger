{"ast":null,"code":"var _jsxFileName = \"D:\\\\reactjs\\\\laundry-logger\\\\client\\\\src\\\\context\\\\log\\\\LogState.js\";\nimport React, { useReducer } from 'react';\nimport axios from 'axios';\nimport LogContext from './logContext';\nimport logReducer from './logReducer';\nimport { GET_LOGS, ADD_LOG, DELETE_LOG, SET_CURRENT, CLEAR_CURRENT, FILTER_LOGS, CLEAR_LOGS, CLEAR_FILTER, LOG_ERROR, UPDATE_LOG } from '../types';\n\nconst LogState = props => {\n  const initialState = {\n    logs: null,\n    current: null,\n    filtered: null,\n    error: null\n  };\n  const [state, dispatch] = useReducer(logReducer, initialState); // Get Logs\n\n  const getLogs = async () => {\n    try {\n      const res = await axios.get('/api/logs');\n      dispatch({\n        type: GET_LOGS,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: LOG_ERROR,\n        payload: err.response.msg\n      });\n    }\n  }; // Add Log\n\n\n  const addLog = async log => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    try {\n      const res = await axios.post('/api/logs', log, config);\n      dispatch({\n        type: ADD_LOG,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: LOG_ERROR,\n        payload: err.response.msg\n      });\n    }\n  }; // Delete Log\n\n\n  const deleteLog = async id => {\n    try {\n      await axios.delete(`/api/logs/${id}`);\n      console.log('test');\n      dispatch({\n        type: DELETE_LOG,\n        payload: id\n      });\n    } catch (err) {\n      dispatch({\n        type: LOG_ERROR,\n        payload: err.response.msg\n      });\n    }\n  }; // Update Log\n  // const updateLog = async (log) => {\n  //   const config = {\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //     },\n  //   };\n  //   try {\n  //     const res = await axios.put(`/api/logs/${log._id}`, log, config);\n  //     dispatch({\n  //       type: UPDATE_LOG,\n  //       payload: res.data,\n  //     });\n  //   } catch (err) {\n  //     dispatch({\n  //       type: LOG_ERROR,\n  //       payload: err.response.msg,\n  //     });\n  //   }\n  // };\n\n\n  const updateLog = log => {\n    dispatch({\n      type: UPDATE_LOG,\n      payload: log\n    });\n    console.log(log);\n  }; // Clear Logs\n\n\n  const clearLogs = () => {\n    dispatch({\n      type: CLEAR_LOGS\n    });\n  }; // Set Current Log\n\n\n  const setCurrent = log => {\n    dispatch({\n      type: SET_CURRENT,\n      payload: log\n    });\n  }; // Clear Current Log\n\n\n  const clearCurrent = () => {\n    dispatch({\n      type: CLEAR_CURRENT\n    });\n  }; // Filter Log\n\n\n  const filterLogs = text => {\n    dispatch({\n      type: FILTER_LOGS,\n      payload: text\n    });\n  }; // Clear Filter\n\n\n  const clearFilter = () => {\n    dispatch({\n      type: CLEAR_FILTER\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(LogContext.Provider, {\n    value: {\n      logs: state.logs,\n      current: state.current,\n      filtered: state.filtered,\n      error: state.error,\n      addLog,\n      deleteLog,\n      setCurrent,\n      clearCurrent,\n      filterLogs,\n      updateLog,\n      clearFilter,\n      getLogs,\n      clearLogs\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default LogState;","map":{"version":3,"sources":["D:/reactjs/laundry-logger/client/src/context/log/LogState.js"],"names":["React","useReducer","axios","LogContext","logReducer","GET_LOGS","ADD_LOG","DELETE_LOG","SET_CURRENT","CLEAR_CURRENT","FILTER_LOGS","CLEAR_LOGS","CLEAR_FILTER","LOG_ERROR","UPDATE_LOG","LogState","props","initialState","logs","current","filtered","error","state","dispatch","getLogs","res","get","type","payload","data","err","response","msg","addLog","log","config","headers","post","deleteLog","id","delete","console","updateLog","clearLogs","setCurrent","clearCurrent","filterLogs","text","clearFilter","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from 'react';\r\nimport axios from 'axios';\r\nimport LogContext from './logContext';\r\nimport logReducer from './logReducer';\r\nimport {\r\n  GET_LOGS,\r\n  ADD_LOG,\r\n  DELETE_LOG,\r\n  SET_CURRENT,\r\n  CLEAR_CURRENT,\r\n  FILTER_LOGS,\r\n  CLEAR_LOGS,\r\n  CLEAR_FILTER,\r\n  LOG_ERROR,\r\n  UPDATE_LOG,\r\n} from '../types';\r\n\r\nconst LogState = (props) => {\r\n  const initialState = {\r\n    logs: null,\r\n    current: null,\r\n    filtered: null,\r\n    error: null,\r\n  };\r\n\r\n  const [state, dispatch] = useReducer(logReducer, initialState);\r\n\r\n  // Get Logs\r\n  const getLogs = async () => {\r\n    try {\r\n      const res = await axios.get('/api/logs');\r\n\r\n      dispatch({\r\n        type: GET_LOGS,\r\n        payload: res.data,\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: LOG_ERROR,\r\n        payload: err.response.msg,\r\n      });\r\n    }\r\n  };\r\n\r\n  // Add Log\r\n  const addLog = async (log) => {\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.post('/api/logs', log, config);\r\n\r\n      dispatch({ type: ADD_LOG, payload: res.data });\r\n    } catch (err) {\r\n      dispatch({ type: LOG_ERROR, payload: err.response.msg });\r\n    }\r\n  };\r\n\r\n  // Delete Log\r\n  const deleteLog = async (id) => {\r\n    try {\r\n      await axios.delete(`/api/logs/${id}`);\r\n\r\n      console.log('test');\r\n\r\n      dispatch({\r\n        type: DELETE_LOG,\r\n        payload: id,\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: LOG_ERROR,\r\n        payload: err.response.msg,\r\n      });\r\n    }\r\n  };\r\n\r\n  // Update Log\r\n  // const updateLog = async (log) => {\r\n  //   const config = {\r\n  //     headers: {\r\n  //       'Content-Type': 'application/json',\r\n  //     },\r\n  //   };\r\n\r\n  //   try {\r\n  //     const res = await axios.put(`/api/logs/${log._id}`, log, config);\r\n\r\n  //     dispatch({\r\n  //       type: UPDATE_LOG,\r\n  //       payload: res.data,\r\n  //     });\r\n  //   } catch (err) {\r\n  //     dispatch({\r\n  //       type: LOG_ERROR,\r\n  //       payload: err.response.msg,\r\n  //     });\r\n  //   }\r\n  // };\r\n  const updateLog = (log) => {\r\n    dispatch({ type: UPDATE_LOG, payload: log });\r\n    console.log(log);\r\n  };\r\n\r\n  // Clear Logs\r\n  const clearLogs = () => {\r\n    dispatch({ type: CLEAR_LOGS });\r\n  };\r\n\r\n  // Set Current Log\r\n  const setCurrent = (log) => {\r\n    dispatch({ type: SET_CURRENT, payload: log });\r\n  };\r\n\r\n  // Clear Current Log\r\n  const clearCurrent = () => {\r\n    dispatch({ type: CLEAR_CURRENT });\r\n  };\r\n\r\n  // Filter Log\r\n  const filterLogs = (text) => {\r\n    dispatch({ type: FILTER_LOGS, payload: text });\r\n  };\r\n\r\n  // Clear Filter\r\n  const clearFilter = () => {\r\n    dispatch({ type: CLEAR_FILTER });\r\n  };\r\n\r\n  return (\r\n    <LogContext.Provider\r\n      value={{\r\n        logs: state.logs,\r\n        current: state.current,\r\n        filtered: state.filtered,\r\n        error: state.error,\r\n        addLog,\r\n        deleteLog,\r\n        setCurrent,\r\n        clearCurrent,\r\n        filterLogs,\r\n        updateLog,\r\n        clearFilter,\r\n        getLogs,\r\n        clearLogs,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </LogContext.Provider>\r\n  );\r\n};\r\n\r\nexport default LogState;\r\n"]},"metadata":{},"sourceType":"module"}